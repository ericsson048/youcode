// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  ownedCourses courseOnUser[]
  lessons lessonOnUser[]
  accounts      Account[]
  sessions      Session[]
  createdCourses         course[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model course{
  id String @id @default(cuid())  
  name String 
  presantation String // markdown
  photo String
  createdAt DateTime @default(now())
  creatorId String   @map("userid")  
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  users courseOnUser[]
  lessons lesson[]
}

model lesson{
id String @id @default(cuid())
name String
rank String
content String
state lessonState @default(HIDDEN)
creatAt DateTime @default(now())
course course @relation(fields: [courseId], references: [id])
courseId String
users lessonOnUser[]
}

enum lessonState{
  HIDDEN
  PUBLISHED
  PUBLIC
}
model lessonOnUser{
id String @id @default(cuid())
userId String
lessonId String
progress progress @default(NOT_STARTED)
createAt DateTime @default(now())
user User @relation(fields: [userId], references: [id])
lesson lesson @relation(fields: [lessonId], references: [id])
@@unique([userId,lessonId])
}

enum progress{
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
model courseOnUser{
id String @id @default(cuid())
userId String
courseId String
createAt DateTime @default(now())
canceledAt DateTime?
user User @relation(fields:[userId], references:[id])
course course @relation(fields: [courseId], references: [id])
@@unique([userId,courseId])
}